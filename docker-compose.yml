# production docker compose

services:
  postgres:
    container_name: cau_hackathon_postgres
    hostname: postgres
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=cau_hackathon
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=admin --dbname=cau_hackathon" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cau-hackathon_network
    restart: always

  backend:
    container_name: cau_hackathon_backend
    hostname: backend
    build:
      context: backend
      dockerfile: Dockerfile
    command: gunicorn -c ./gunicorn_conf.py
    volumes:
      - ./backend/logs:/home/app/logs
      - ./backend/staticfiles:/home/app/staticfiles
      - ./backend/media:/home/app/media/
      - ./backend/locales:/home/app/locales
    environment:
      - LOGGER_BOT_TOKEN=7103058255:AAEgd6zSw9PAvwneoCJ3OD0K2jEO4FUSnAo
      - LOGGER_CHAT_ID=-1002190718985
      - DEBUG=False
      - DB_NAME=cau_hackathon
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_HOST=postgres
      - DB_PORT=5432
    security_opt:
      - seccomp:unconfined
    ports:
      - 8080:8000
    depends_on:
      - postgres
    networks:
      - cau_hackathon_network
    restart: always

  frontend:
    container_name: cau_hackathon_frontend
    hostname: frontend
    build:
      context: frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - 3030:3000
    depends_on:
      - postgres
      - backend
    networks:
      - cau_hackathon_network
    restart: always

volumes:
  postgres_data:

networks:
  cau_hackathon_network:
    driver: bridge
